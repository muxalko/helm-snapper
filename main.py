from shutil import ExecError
from kubernetes import client, config
from docker_image import reference
import yaml
import json
import argparse
import subprocess
from collections import Counter

def yaml_as_python(val):
    """Convert YAML to dict"""
    try:
        return yaml.safe_load(val)
    except yaml.YAMLError as exc:
        return exc

def yamls_as_python(val):
    """Convert YAMLs to dict"""
    try:
        return yaml.safe_load_all(val)
    except yaml.YAMLError as exc:
        return exc

##################
## Input params ##
parser = argparse.ArgumentParser()
parser.add_argument("--helmchart_path", help="Specify your helmchart")
# parser.add_argument("yaml_docs_file", help="Specify your multi doc yaml file")
parser.add_argument("--values_override", help="Specify your values yaml file")
parser.add_argument("--target_namespace", help="Target namespace")
args = parser.parse_args()

parser = argparse.ArgumentParser()

#environment = args.environment
#print(environment)
#pattern_text = r'(?P<ingredient>\w+):\s+(?P<amount>\d+)\s+(?P<unit>\w+)'
#pattern = re.compile(pattern_text)
#match = pattern.match(ingredient)>>> match is NoneFalse>>> match.groups()

registry_host = 'harbor.rogers.lab'
namespace_filter = ['kube-system','tca-system','tkg-system']

chart_name = ''
chart_version = ''
chart = ''
revision = ''
container_name = ''
container_image = ''

data={}
data['images']=[]

running_images_counter=Counter()
wanted_images_counter=Counter()
wanted_images=[]
running_images=[]


if __name__ == '__main__':
    print("====================================Reading Chart name, version and generating kubernetes manifests=========================")
    # read version from Charts.yaml
    with open(args.helmchart_path +'/Chart.yaml', 'r') as input_file:
        results = yaml_as_python(input_file)
        try:
            chart_name=results['name']
            chart_version=results['version']
            chart="{0}-{1}".format(chart_name,chart_version)
        except KeyError as err:
                print("Oops! There was no key {0} found.".format(err))


    # write template file with deployment manifests by using helm install --dry-run flag (there are cases when hooks might render the results inaccurate)
    template="template_{0}.{1}".format(args.target_namespace,chart)
    with open(template, 'w') as template_file:
        cmd=["/usr/local/bin/helm", "install", chart_name, "-n", args.target_namespace, 
            "--dry-run", args.helmchart_path,"--values", args.values_override]
        print("Running cmd: {}".format(' '.join(cmd)))
        cp = subprocess.run(cmd,stdout = template_file, stderr = subprocess.PIPE)
        #print(cp.stdout.decode("utf8"))
        print("[Helm install --dry-run] stderr:{0}".format(cp.stderr))
    try: # read template back and load as dicts
        with open(template, 'r') as input_file:
            all_k8s_yaml_docs = yamls_as_python(input_file)
            # try: # get the revision generated by helm
            #     print(value)
            #     if 'REVISION' in value.keys():
            #         revision = value['REVISION']
            #         print("Revision: {0}".format(revision))
            #         continue
            # except KeyError as err:
            #     pass #print("Oops!  There was no key {0} found.".format(err))
            
            print("====================================Harvesting images out of kubernetes manifests=========================")
            for value in all_k8s_yaml_docs:
                
                try:
                    # we interested in all kinds of objects where container(s) are mentioned 
                    # TODO: think of way to include non-standard objects. 
                    # Let's try to extract image names
                    if value is not None:
                        if 'kind' in value.keys():
                           ######################################
                            if value['kind'] == 'StatefulSet' \
                            or value['kind'] == 'Job' \
                            or value['kind'] == 'Deployment':
                            #####################################
                                if not value['metadata']['name']:
                                    print("Cannot find value['metadata']['name']")
                                print("Kind: {0}, Name: {1}".format(value['kind'],value['metadata']['name']))
                                for container in value['spec']['template']['spec']['containers']:
                                    container_name = container['name']
                                    container_image = container['image']
                                    print("\t container name: {0}, image: {1}".format(container_name, container_image))
                                    data['images'].append({'image': container_image})
                           ########################################
                            elif value['kind'] == 'Beat':
                            #######################################   
                                if not value['metadata']['name']:
                                    print("Cannot find value['metadata']['name']")
                                
                                print("Kind: {0}, Name: {1}".format(value['kind'],value['metadata']['name']))
                    
                                # look for containers under daemonSet
                                try:
                                    for container in value['spec']['daemonSet']['podTemplate']['spec']['containers']:
                                        container_name = container['name']
                                        container_image = container['image']
                                        print("\t [daemonSet] container name: {0}, image: {1}".format(container_name, container_image))
                                        data['images'].append({'image': container_image})
                                except KeyError as err:
                                    #print("Oops!  There was no key {0} found.".format(err))
                                    pass

                                # look for containers under deployment
                                try:
                                    for container in value['spec']['deployment']['podTemplate']['spec']['containers']:
                                        container_name = container['name']
                                        container_image = container['image']
                                        print("\t [deployment] container name: {0}, image: {1}".format(container_name, container_image))
                                        data['images'].append({'image': container_image})
                                except KeyError as err:
                                    #print("Oops!  There was no key {0} found.".format(err))
                                    pass
                            elif value['kind'] == 'Elasticsearch':
                                print("Kind: {0}, Name: {1}".format(value['kind'],value['metadata']['name']))

                                #print("DEBUG JSON \n{}".format(json.dumps(value, indent=4)))

                                # look for containers under nodeSets
                                try:
                                    for nodeset in value['spec']['nodeSets']:
                                        for container in nodeset['podTemplate']['spec']['containers']:
                                            container_name = container['name']
                                            container_image = value['spec']['image']
                                            print("\t [nodeset][{0}] container name: {1}, image: {2}".format(nodeset['name'],container_name, container_image))
                                            data['images'].append({'image': container_image})
                                except KeyError as err:
                                    print("Oops!  There was no key {0} found.".format(err))
                                    pass
                                
                except KeyError as err:
                    print("Oops!  There was no key {0} found.".format(err))
                    pass
    except Exception as err:
        print("Oops! {0}".format(err))

    
    print("=====================================Trying to get the harvested images resolved==============================")    
    # generate images manifest for resolution of digest
    manifest = "manifest_{0}.{1}".format(args.target_namespace,chart)
    manifest_lock = "{0}.lock".format(manifest)

    with open(manifest, 'w') as f:
        f.write(yaml.dump(data))
    
    #try to load the resolved digests from generated file 
    cmd=["/usr/local/bin/kbld", "-f", manifest, "--lock-output", manifest_lock]
    print("Running cmd: {}".format(' '.join(cmd)))
    cp = subprocess.run(cmd,stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    try:
        print("==========================================Read the results and count images=====================================")
        # read all the resolved images mapping
        with open(manifest_lock, 'r') as input_file:
            images_digest = yamls_as_python(input_file)
            # TODO: add check for multiple docs
            for value in images_digest:
                try:
                    if len(value['overrides'])>0:
                        for image_map in value['overrides']:
                            print("{0}={1}".format(image_map['image'],image_map['newImage']))
                            ref_tag = reference.Reference.parse(image_map['image'])
                            ref_digest = reference.Reference.parse(image_map['newImage'])
                            # print("ref_tag: {}".format(ref_tag))
                            # print("ref_digest: {}".format(ref_digest))
                            wanted_images_counter.update({"{}:{}".format(ref_tag['name'],ref_tag['tag']) if ref_digest['digest'] is None else "{}:{}@{}".format(ref_tag['name'],ref_tag['tag'],ref_digest['digest'])})
                            wanted_images.append({ 'name': ref_tag['name'], 'tag': ref_tag['tag'], 'digest': ref_digest['digest']})
                            #helm_template_images.append({"image"image_map['newImage']})
                    else:
                        print("no images detected")
                        print(value)
                except KeyError as err:
                    print("Oops!  There was no key {0} found.".format(err))
    except Exception as err:
        print("Oops! {0}".format(err))

    #######################
    ## K8S Client config ##
    # Configs can be set in Configuration class directly or using helper utility
    config.load_kube_config()
    #config.load_kube_config(
    #            config_file=environ['KUBECONFIG'],
    #            context="rtrm-"+environment+"-admin@rtrm-"+environment)
    # conf = config.list_kube_config_contexts()[1]
    # print(json.dumps(conf, indent=4))
    contexts, active_context = config.list_kube_config_contexts()
    if not contexts:
        print("Cannot find any context in kube-config file.")
        exit(1)
    #contexts = [context['name'] for context in contexts]
    #active_index = contexts.index(active_context['name'])
    cluster = active_context['context']['cluster']

    v1 = client.CoreV1Api()
   
    print("=============================================Listing pods within {0} namespace===================================".format(args.target_namespace))
    #ret = v1.list_pod_for_all_namespaces(watch=False)

    ret = v1.list_namespaced_pod(args.target_namespace,watch=False)


    for i in ret.items:
        for j in i.spec.containers:
            ref = reference.Reference.parse(j.image)
            print(ref)
            running_images_counter.update({"{}:{}".format(ref['name'],ref['tag']) if ref['digest'] is None else "{}:{}@{}".format(ref['name'],ref['tag'],ref['digest'])})
            running_images.append(ref)
            # for key in ref.keys():
            #     print("{0}:{1}",key,ref.values[key])
            # hostname, image_name = ref..split_hostname()
            # print('namespace: {}, image_name: {}, tag: {}, sha256: {}'.format(i.metadata.namespace, image_name, ref['tag']))
            # if ref['tag'] is not None:
            #     images.append(image_name + ":" + ref['tag'])
            
            #     # TODO: need to check case when the same image with different version is used
            #     if image_name not in tags:
            #         tags[image_name] = ref['tag']
            # #print(ref)
            # if ref['tag']:
            #     print("%s\t%s\t%s" % (i.metadata.namespace, j.name, ref['name'], ref['tag']))
            # else:
            #     print("%s\t%s\t%s" % (i.metadata.namespace, j.name, ref['name'], ref['digest']))
            # #print("\n")
            # #print(json.dumps(i.metadata))
            # #print("%s\t%s\t%s\t%s" % (i.status.pod_ip, i.metadata.namespace, i.metadata.name, j.image))
            # #print("%s\t%s" % (j.name, j.image))
            # #print(ref)
    # print("============================================================wanted_images==============================================")
    
    # print(wanted_images)
    
    # print("============================================================running_images==============================================")
    
    # print(running_images)
    
    print("============================================================image_counter==============================================")
    #image_counter=Counter("{}:{}".format(image['name'],image['tag']) if image['digest'] is None else image['digest'] for image in wanted_images)
    #image_counter.update("{}:{}".format(image['name'],image['tag']) if image['digest'] is None else image['digest'] for image in running_images)
    # print(image_counter)

    # for image, count in image_counter.items():
    #     if count%2==0:
    #         print("match {0} - counted {1} times.".format(image, count))
    #     else:
    #         print("no match {0} - counted {1} times.".format(image, count))
    print("wanted_images counter:")
    for (image,count) in wanted_images_counter.items():
        print("{} - counted {} times".format(image,count))

    print("running_images counter:")
    for (image,count) in running_images_counter.items():
        print("{} - counted {} times".format(image,count))

    print("============================================================Analysis==============================================")
   
    print("wanted_images list:")
    print(wanted_images)
    print("running_images list:")
    print(running_images)
    print("Matching analysis Wanted to Running")
    for wanted_image in wanted_images.copy():
        print("Processing {}".format(wanted_image['name']))
        for running_image in running_images.copy():
            if wanted_image['name'] == running_image['name']:
                print("name match")
                if wanted_image['tag'] == running_image['tag']:
                    print("tag match")
                    if wanted_image['digest'] == running_image['digest']:
                        print("digest match")
                        wanted_images.remove(wanted_image)
                        running_images.remove(running_image)
                    else:
                        print("no digest match")
                        # TODO: all images must have digests from templates
                        # temporary tolerate digest absence 
                        # wanted_images.remove(wanted_image)
                        running_images.remove(running_image)
                else:
                    print("no tag match")
                
    print("Missing images - wanted but not found amongst running:")
    for wanted_image in wanted_images:
        print("{} - Not found".format(wanted_image))

    print("Unknown images - not declared as wanted but found amongst running:")
    for running_image in running_images:
        print("{} - Unknown detected".format(running_image))
                